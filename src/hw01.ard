-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y
\func apply (f : Nat -> Nat) (x : Nat) => f x
\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x
\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func \infix 2 f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 1 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 2 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func if' (expr t e : Bool) : Bool \elim expr
  | true => t
  | false => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if' x true y

\func testOr00 : (false || false) = false => idp
\func testOr01 : (false || true) = true => idp
\func testOr10 : (true  || false) = true => idp
\func testOr11 : (true  || true) = true => idp

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat
  | x, 0 => 1
  | x, (suc y) => x * (x ^ y)

\func testPow1 : 2 ^ 3 = 8 => idp
\func testPow2 : 2 ^ 0 = 1 => idp

\func fac (x : Nat) : Nat
  | 0 => 1
  | (suc x) => (suc x) * (fac x)

\func testFac : fac 5 = 120 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) => x - (x `div` y) * y

-- gcd(a, b) = gcd(b, a % b)
\func gcd (x y : Nat) => gcd' x y (x + y + 1)
    \where
      \func gcd' (x y f : Nat) : Nat
        | x, _, 0 => 0
        | x, 0, _ => x
        | x, y, (suc f) => gcd' y (x `mod` y) f

\func testGcd1 : gcd 6 4 = 2 => idp
\func testGcd2 : gcd 19 21 = 1 => idp
\func testGcd3 : gcd 1 2 = 1 => idp
\func testGcd4 : gcd 0 1 = 1 => idp
