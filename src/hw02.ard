\import Utils
\import hw01 (fac)

-- 1. Определите полиморфный tail для списков.
\func tail {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => xs

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func cmpNat (x y : Nat) : Bool -- x <= y
  | 0, 0 => true
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => cmpNat x y

\func insertionSort {A : \Type} (xs : List A) (cmp : A -> A -> Bool) : List A \elim xs
  | nil => nil
  | cons x xs => insert x (insertionSort xs cmp) cmp
  \where \func insert {A : \Type} (y : A) (xs : List A)(cmp : A -> A -> Bool) : List A \elim y, xs
    | y, nil => cons y nil
    | y, cons x xs =>
      if (cmp y x)
          (cons y (cons x xs))
          (cons x (insert y xs cmp))

\func testSort : (insertionSort (cons 3 (cons 1 (cons 2 nil))) cmpNat) = (cons 1 (cons 2 (cons 3 nil))) => idp

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x && y) && z = x && (y && z) \elim x
  | true => idp
  | false => idp

\func ||-assoc (x y z : Bool) : (x || y) || z = x || (y || z) \elim x
  | true => idp
  | false => idp

-- 4. Докажите, что fac 3 равно 6.

\func fac3eq6 : (fac 3 = 6) => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R =>
  f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Either P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R =>
  g (f ((\lam p _ => g p)))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (f : (P -> Q -> R)) (h : \Sigma P Q) : R \elim h
  | (p,q) => f p q

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q R : \Type} (h : (Either P Q) -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) =>
  ((\lam p => (h (inl p)).2), (\lam q => (h (inr q)).1))

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q R : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q =>
  f (\lam g => g (\lam p => f (\lam h => p)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) =>
  (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty =>
  \lam p3 => h (3, p3)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> (P x) -> (Q x)) (w : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) \elim w
  | (x, px) => (x, h x px)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> (Either (Not (P x)) (Not (Q x)))) : (P 3) -> (Q 3) -> Empty =>
  \case h 3 \with {
    | inl npx => (\lam px qx => absurd (npx px))
    | inr nqx => (\lam px qx => nqx qx)
  }