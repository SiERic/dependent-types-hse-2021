\import Utils
\import lect02 (id')
\import lect04 (true/=false)
\import lect05 (filter, foo, funExt)

-- 1. Докажите, что (\lam x => not (not x)) = (\lam x => x).

\func notNotId : (\lam x => not (not x)) = (\lam x => x) =>
  sym (funExt (\lam _ => Bool) (foo id'))

-- 2. Докажите, что fac не равен suc.

\open Nat(*)

\func fac (n : Nat) : Nat
  | 0 => 1
  | suc n => suc n * fac n

\func toBool (n : Nat) : Bool
  | 1 => true
  | _ => false

\func fac/=suc (p : fac = suc) : Empty =>
  true/=false (pmap (\lam f => toBool (f 1)) p)

-- 3. Докажите, что left = right, не используя transport, coe и паттерн матчинг с idp.

\func left=right : left = right =>
  path id'

-- 4. Докажите, что если a = a' и b = b', то (a,b) = (a',b'), не используя transport, coe и паттерн матчинг с idp.

\func pairEq {A B : \Type} {a a' : A} {b b' : B} (p : a = a') (q : b = b') : (a,b) = (a',b') =>
  path (\lam i => (p @ i, q @ i))

-- 5. Докажите, что если p = p', то p.1 = p'.1, не используя transport, coe и паттерн матчинг с idp.

\func projEq {A : \Type} (B : A -> \Type) {p p' : \Sigma (x : A) (B x)} (t : p = p') : p.1 = p'.1 =>
  path (\lam i => (t @ i).1)

-- 6. Докажите pmap2, не используя transport, coe и паттерн матчинг с idp.

\func pmap2' {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  path (\lam i => f (p @ i) (q @ i))

-- 7. Мы видели как определить transport через coe. Определите частный случай coe через transport.

\func coe0 (A : I -> \Type) (a : A left) : A right =>
  transport A left=right a

-- 8. Определите функцию B right -> B left.

\func Itr' {B : I -> \Type} (b : B right) : B left =>
  transport B (sym left=right) b

-- 9. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | cons x xs => inHead (a = x)
  | cons x xs => idTail (In a xs)

-- Optional:
-- 10. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'.

-- 11. Определите рефлексивное транзитивное замыкание отношения.
--     То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | super (R x y)
  | refl  (x = y)
  | trans (z : A) (ReflTransClosure R x z) (ReflTransClosure R z y)

-- 12. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y
  => \lam x y => (toRTC R x y, toR R refl trans x y)
    \where {
      \func toRTC {A : \Type} (R : A -> A -> \Type) (x y : A) (r : R x y) : ReflTransClosure R x y =>
        super r
      \func toR {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z) (x y : A) (rtc : ReflTransClosure R x y) : R x y
        \elim x, y, rtc
          | x, y, super r => r
          | x, y, refl  p => transport (\lam a => R x a) p (refl x)
          | x, y, trans z rtc1 rtc2 => trans x z y (toR R refl trans x z rtc1) (toR R refl trans z y rtc2)
    }

-- 13. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys".

\data Sublist {A : \Type} (xs ys : List A) \elim xs, ys
  | nil, _ => empty
  | cons x xs, cons y ys => head (x = y) (Sublist xs ys)
  | xs, cons y ys => tail (Sublist xs ys)

-- 14. Докажите, что Sublist (filter p xs) xs для любых p и xs.

\func filter-sublist {A : \Type} (p : A -> Bool) (xs : List A) : Sublist (filter p xs) xs \elim xs
  | nil => empty
  | cons a xs =>
    \case (p a) \as b \return
      Sublist {A} (\case b \with {
        | true => cons {A} a (filter {A} p xs)
        | false => filter {A} p xs
      }) (cons {A} a xs)
    \with {
      | true => head idp (filter-sublist p xs)
      | false => tail (filter-sublist p xs)
    }

-- 15. Определите filter через if, а не через \case.
--     Докажите для этой версии filter лемму filter-lem.

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons a xs => if (p a) (cons a (filter' p xs)) (filter' p xs)

\func <=-step-lem {n m : Nat} (n<=m : Nat.<= n m) :  Nat.<= n (suc m) \elim n, m, n<=m
  | 0, m, zero<=_ => Nat.zero<=_
  | suc n, suc m, Nat.suc<=suc n<=m => Nat.suc<=suc (<=-step-lem n<=m)


\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) Nat.<= length xs \elim xs
  | nil => Nat.zero<=_
  | cons a xs =>
    \case p a \as b \return
      length {A} (if {List A} (b) (cons {A} a (filter' {A} p xs)) (filter' {A} p xs)) Nat.<= suc (length {A} xs)\with {
      | true => Nat.suc<=suc (filter-lem p xs)
      | false => <=-step-lem (filter-lem p xs)
    }

-- 16. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции.

-- Done
