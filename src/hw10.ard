\import Paths.Meta
\import lect10
\import Utils \hiding (transport,Or,inl,inr)

-- 1. Докажите, что если A : \Prop, то Trunc A эквивалентен A.

\func trunc-prop {A : \Prop} : Trunc A <-> A =>
  (trunc2a, trunc)
  \where
    \func trunc2a {A : \Prop} (t : Trunc A) : A
      | trunc a => a

-- 2. Докажите следующий закон де Моргана.

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C)) =>
  (left A B C, right A B C)
  \where {
    \func left (A B C : \Prop) (p : (\Sigma A (B `Or` C))) : ((\Sigma A B) `Or` (\Sigma A C)) \elim p
      | (a,bc) =>
        \case bc \with {
          | inl b => inl (a, b)
          | inr c => inr (a, c)
        }
    \func right (A B C : \Prop) (p : ((\Sigma A B) `Or` (\Sigma A C))) : (\Sigma A (B `Or` C)) \elim p
      | inl (a, b) => (a, inl b)
      | inr (a, c) => (a, inr c)
  }

-- 3. Определите элиминатор для Or через Or-rec, не используя паттерн матчинг на Or.

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p =>
  \let cp =>
    Or-rec {A} {B} {(\Sigma (p : Or A B) (C p))}
      (\lam x => (inl x, f x))
      (\lam x => (inr x, g x))
      p
  \in rewrite (Path.inProp p cp.1) cp.2

-- 4. Докажите, что тип утверждений является множеством.

\func prop-isSet : isSet \Prop => {?}

-- Можно сделать только одно из упражнений 5a,5b на выбор.
-- 5a. Тип С называется когенератором, если для любых множеств A и B и любых функция f,g : A -> B верно, что если h `o` f = h `o` g для всех h : B -> C, то f = g.
--     Докажите, что \Prop является когенератором.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h `o` f = h `o` g) -> f = g

\func PropIsCogenerator : isCogenerator \Prop => {?}

-- 5b. Тип X называется инъективным, если для любой функции f : A -> X и любой инъекции i : A -> B сущесвует функция l : B -> X такая, что l `o` i = f.
--     Докажите, что \Prop инъективен.

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) => \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l `o` i = f)

\func Prop-isInjective : isInjective \Prop => {?}