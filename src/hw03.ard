\import Utils
\import lect02 (+-assoc)
\import lect03 \hiding (Vec,vnil,vcons)
\open Nat(+,*)

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (n : Nat) (P : T (n < length xs)) : A
  | nil, 0, ()
  | cons a xs, 0, P => a
  | cons a xs, suc n, P => lookup xs n P

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate {A : \Type} (a : A) (n : Nat) : Vec A n
  | a, 0 => vnil
  | a, suc n => vcons a (replicate a n)

\func replicate' {A : \Type} (a : A) (n : Nat) : vec A n
  | a, 0 => ()
  | a, suc n => (a, replicate' a n)

-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map {A B : \Type} {n : Nat} (f : A -> B) (as : Vec A n) : Vec B n \elim n, f, as
  | 0, f, vnil => vnil
  | suc n, f, vcons a as => vcons (f a) (map f as)

\func map' {A B : \Type} {n : Nat} (f : A -> B) (as : vec A n) : vec B n \elim n, f, as
  | 0, f, as => ()
  | suc n, f, as => (f (head _ as), map' f (tail _ as))

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.

\func zipWith {A B C : \Type} {n : Nat} (f : A -> B -> C) (as : Vec A n) (bs : Vec B n) : Vec C n \elim n, as, bs
  | 0, vnil, vnil => vnil
  | suc n, vcons a as, vcons b bs => vcons (f a b) (zipWith f as bs)

\func zipWith' {A B C : \Type} {n : Nat} (f : A -> B -> C) (as : vec A n) (bs : vec B n) : vec C n \elim n, as, bs
  | 0, as, bs => ()
  | suc n, as, bs => (f (head _ as) (head _ bs), zipWith' f (tail _ as) (tail _ bs))

-- 5. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
      transport (\lam x => f a b = f x b') p (pmap' (\lam b => f a b) q)

-- 6. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B =>
  transport (\lam x => x) p a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' =>
  repl (pmap (\lam x => B x) p) b

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => cleaf
  | suc n => cnode A (CTree A n) (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | 0 => leaf
  | suc n => {
    | nleaf
    | node A (Tree A n) (Tree A n)
  }

-- определите функцию, возвращающую высоту дерева.

\func max {n : Nat} (x : Fin n) (y : Fin n) : Fin n
  | {suc n}, fzero, fzero => fzero
  | {suc n}, fzero, fsuc y => fsuc y
  | {suc n}, fsuc x, fzero => fsuc x
  | {suc n}, fsuc x, fsuc y => fsuc (max x y)

\func height {A : \Type} (n : Nat) (t : Tree A n) : Fin (suc n)
  | 0, leaf => fzero
  | suc n, nleaf => fzero
  | suc n, node _ l r => fsuc (max (height n l) (height n r))

-- Optional task
-- 9. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n, f
  | 0, f => vnil
  | suc n, f => vcons (f fzero) (coin (\lam x => f (fsuc x)))

-- Optional task
-- 10. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => (Fin n) -> (Fin m) -> A

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n
  | z, e, 0 => Fin-absurd
  | z, e, suc n => \lam i j => \case i, j \with {
    | fzero, fzero => e
    | fzero, fsuc j => z
    | fsuc i, fzero => z
    | fsuc i, fsuc j => (diag z e n) i j
  }

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n =>
  \lam i j => M j i

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m =>
  \lam i j => add (M i j) (N i j)

-- умножение матриц

\func fold {A : \Type} {n : Nat} (z : A) (f : A -> A -> A) (as : Vec A n) : A \elim n, as
  | 0, vnil => z
  | suc n, vcons a as => f a (fold z f as)

-- z ─ нейтральный элемент по сложению.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k =>
  \lam i j => fold z add (zipWith mul (coin (\lam x => M i x)) (coin (\lam x => N x j)))

-- 11. Докажите, что reverse (reverse xs) = xs, где reverse определен через ++.

\func reverse {A : \Type} (xs : List A) : List A
  | nil => nil
  | cons x xs => reverse xs ++ cons x nil

\func ++addNil {A : \Type} (xs : List A) : xs = xs ++ nil \elim xs
  | nil => idp
  | cons a xs => pmap (cons a) (++addNil xs)

\func ++assoc {A : \Type} (xs ys zs : List A) : xs ++ ys ++ zs = xs ++ (ys ++ zs) \elim xs
  | nil => idp
  | cons a xs => pmap (cons a) (++assoc xs ys zs)

-- Это утверждение будет полезно для доказательства.
\func reverse++ {A : \Type} (xs ys : List A) : reverse (xs ++ ys) = reverse ys ++ reverse xs \elim xs
  | nil => ++addNil (reverse ys)
  | cons x xs =>
    reverse (xs ++ ys) ++ cons x nil           ==<  pmap (\lam as => as ++ (cons x nil)) (reverse++ xs ys) >==
    reverse ys ++ reverse xs ++ (cons x nil)   ==<  ++assoc (reverse ys) (reverse xs) (cons x nil)         >==
    reverse ys ++ (reverse xs ++ (cons x nil)) `qed

\func reverse-isInvolutive {A : \Type} (xs : List A) : reverse (reverse xs) = xs \elim xs
  | nil => idp
  | cons a xs =>
    reverse (reverse xs ++ cons a nil) ==< reverse++ (reverse xs) (cons a nil)     >==
    cons a (reverse (reverse xs))      ==< pmap (cons a) (reverse-isInvolutive xs) >==
    cons a xs `qed

-- 12. Докажите дистрибутивность умножения над сложением для натуральных чисел (выберите 1 из двух вариантов).

\func rdistr (n m k : Nat) : (m + k) * n = m * n + k * n \elim n
  | 0 => idp
  | suc n =>
    (m + k) * n + (m + k)     ==<  pmap (\lam x => x + (m + k)) (rdistr n m k)        >==
    m * n + k * n + (m + k)   ==<  sym (+-assoc (m * n + k * n) m k)                  >==
    m * n + k * n + m + k     ==<  pmap (\lam x => x + k) (+-assoc (m * n) (k * n) m) >==
    m * n + (k * n + m) + k   ==<  pmap (\lam x => m * n + x + k) (+-comm (k * n) m)  >==
    m * n + (m + k * n) + k   ==<  +-assoc (m * n) (m + k * n) k                      >==
    m * n + (m + k * n + k)   ==<  pmap (\lam x => m * n + x) (+-assoc m (k * n) k)   >==
    m * n + (m + (k * n + k)) ==<  sym (+-assoc (m * n) m (k * n + k))                >==
    m * n + m + (k * n + k) `qed

\func ldistr (n m k : Nat) : n * (m + k) = n * m + n * k => {?}
